===== test1 =====
15
===== test2 =====
[let,sum_seq,:,int,->,int,=,fix,f,(,n,:,int,),:,int,->,if,n,<=,0,then,0,else,n,+,f,(,n,-,1,),in,sum_seq,(,5,)]
===== test3 =====
let sum_seq : (int -> int) = fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) in sum_seq (5)
===== test4 =====
-> let sum_seq : (int -> int) = fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) in sum_seq (5)
-> fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (5)
-> if 5 <= 0 then 0 else 5 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (5 - 1)
-> if false then 0 else 5 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (5 - 1)
-> 5 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (4)
-> 5 + if 4 <= 0 then 0 else 4 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (4 - 1)
-> 5 + if false then 0 else 4 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (4 - 1)
-> 5 + 4 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (3)
-> 5 + 4 + if 3 <= 0 then 0 else 3 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (3 - 1)
-> 5 + 4 + if false then 0 else 3 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (3 - 1)
-> 5 + 4 + 3 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (2)
-> 5 + 4 + 3 + if 2 <= 0 then 0 else 2 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (2 - 1)
-> 5 + 4 + 3 + if false then 0 else 2 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (2 - 1)
-> 5 + 4 + 3 + 2 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (1)
-> 5 + 4 + 3 + 2 + if 1 <= 0 then 0 else 1 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (1 - 1)
-> 5 + 4 + 3 + 2 + if false then 0 else 1 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (1 - 1)
-> 5 + 4 + 3 + 2 + 1 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (0)
-> 5 + 4 + 3 + 2 + 1 + if 0 <= 0 then 0 else 0 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (0 - 1)
-> 5 + 4 + 3 + 2 + 1 + if true then 0 else 0 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (0 - 1)
-> 5 + 4 + 3 + 2 + 1 + 0
-> 5 + 4 + 3 + 2 + 1
-> 5 + 4 + 3 + 3
-> 5 + 4 + 6
-> 5 + 10
-> 15
===== test5 =====
-6
===== test6 =====
[3,/,2,+,5,-,6,*,2]
===== test7 =====
3 / 2 + 5 - 6 * 2
===== test8 =====
-> 3 / 2 + 5 - 6 * 2
-> 1 + 5 - 6 * 2
-> 6 - 6 * 2
-> 6 - 12
-> -6
===== test9 =====
38
===== test10 =====
[if,5,<=,3,then,100,-,5,else,33,+,5]
===== test11 =====
if 5 <= 3 then 100 - 5 else 33 + 5
===== test12 =====
-> if 5 <= 3 then 100 - 5 else 33 + 5
-> if false then 100 - 5 else 33 + 5
-> 38
===== test13 =====
1
===== test14 =====
[if,3,<=,4,then,if,true,then,1,else,2,else,2,+,3]
===== test15 =====
if 3 <= 4 then if true then 1 else 2 else 2 + 3
===== test16 =====
-> if 3 <= 4 then if true then 1 else 2 else 2 + 3
-> if true then if true then 1 else 2 else 2 + 3
-> 1
===== test17 =====
15
===== test18 =====
[let,sum_seq,:,int,->,int,=,fix,f,(,n,:,int,),:,int,->,if,n,<=,0,then,0,else,n,+,f,(,n,-,1,),in,sum_seq,(,5,)]
===== test19 =====
let sum_seq : (int -> int) = fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) in sum_seq (5)
===== test20 =====
-> let sum_seq : (int -> int) = fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) in sum_seq (5)
-> fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (5)
-> if 5 <= 0 then 0 else 5 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (5 - 1)
-> if false then 0 else 5 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (5 - 1)
-> 5 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (4)
-> 5 + if 4 <= 0 then 0 else 4 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (4 - 1)
-> 5 + if false then 0 else 4 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (4 - 1)
-> 5 + 4 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (3)
-> 5 + 4 + if 3 <= 0 then 0 else 3 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (3 - 1)
-> 5 + 4 + if false then 0 else 3 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (3 - 1)
-> 5 + 4 + 3 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (2)
-> 5 + 4 + 3 + if 2 <= 0 then 0 else 2 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (2 - 1)
-> 5 + 4 + 3 + if false then 0 else 2 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (2 - 1)
-> 5 + 4 + 3 + 2 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (1)
-> 5 + 4 + 3 + 2 + if 1 <= 0 then 0 else 1 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (1 - 1)
-> 5 + 4 + 3 + 2 + if false then 0 else 1 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (1 - 1)
-> 5 + 4 + 3 + 2 + 1 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (0)
-> 5 + 4 + 3 + 2 + 1 + if 0 <= 0 then 0 else 0 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (0 - 1)
-> 5 + 4 + 3 + 2 + 1 + if true then 0 else 0 + fix f (n:int) : int -> if n <= 0 then 0 else n + f (n - 1) (0 - 1)
-> 5 + 4 + 3 + 2 + 1 + 0
-> 5 + 4 + 3 + 2 + 1
-> 5 + 4 + 3 + 3
-> 5 + 4 + 6
-> 5 + 10
-> 15
===== test21 =====
(143, 37)
===== test22 =====
[(,54,+,89,,,37,)]
===== test23 =====
(54 + 89, 37)
===== test24 =====
-> (54 + 89, 37)
-> (143, 37)
===== test25 =====
Ptr(0):{21}
===== test26 =====
[let,x,:,<,int,>,=,ref,15,in,while,!,x,<=,20,do,x,:=,!,x,+,1,end,;,x]
===== test27 =====
let x : <int> = (ref 15) in ((while (!x) <= 20 do (x := (!x) + 1) end); x)
===== test28 =====
-> let x : <int> = (ref 15) in ((while (!x) <= 20 do (x := (!x) + 1) end); x)
-> let x : <int> = Ptr(0):{15} in ((while (!x) <= 20 do (x := (!x) + 1) end); x)
-> ((while (!Ptr(0):{15}) <= 20 do (Ptr(0):{15} := (!Ptr(0):{15}) + 1) end); Ptr(0):{15})
-> (((Ptr(0):{15} := (!Ptr(0):{15}) + 1); (while (!Ptr(0):{15}) <= 20 do (Ptr(0):{15} := (!Ptr(0):{15}) + 1) end)); Ptr(0):{15})
-> (((Ptr(0):{15} := 15 + 1); (while (!Ptr(0):{15}) <= 20 do (Ptr(0):{15} := (!Ptr(0):{15}) + 1) end)); Ptr(0):{15})
-> (((Ptr(0):{15} := 16); (while (!Ptr(0):{15}) <= 20 do (Ptr(0):{15} := (!Ptr(0):{15}) + 1) end)); Ptr(0):{15})
-> (((); (while (!Ptr(0):{16}) <= 20 do (Ptr(0):{16} := (!Ptr(0):{16}) + 1) end)); Ptr(0):{16})
-> ((while (!Ptr(0):{16}) <= 20 do (Ptr(0):{16} := (!Ptr(0):{16}) + 1) end); Ptr(0):{16})
-> (((Ptr(0):{16} := (!Ptr(0):{16}) + 1); (while (!Ptr(0):{16}) <= 20 do (Ptr(0):{16} := (!Ptr(0):{16}) + 1) end)); Ptr(0):{16})
-> (((Ptr(0):{16} := 16 + 1); (while (!Ptr(0):{16}) <= 20 do (Ptr(0):{16} := (!Ptr(0):{16}) + 1) end)); Ptr(0):{16})
-> (((Ptr(0):{16} := 17); (while (!Ptr(0):{16}) <= 20 do (Ptr(0):{16} := (!Ptr(0):{16}) + 1) end)); Ptr(0):{16})
-> (((); (while (!Ptr(0):{17}) <= 20 do (Ptr(0):{17} := (!Ptr(0):{17}) + 1) end)); Ptr(0):{17})
-> ((while (!Ptr(0):{17}) <= 20 do (Ptr(0):{17} := (!Ptr(0):{17}) + 1) end); Ptr(0):{17})
-> (((Ptr(0):{17} := (!Ptr(0):{17}) + 1); (while (!Ptr(0):{17}) <= 20 do (Ptr(0):{17} := (!Ptr(0):{17}) + 1) end)); Ptr(0):{17})
-> (((Ptr(0):{17} := 17 + 1); (while (!Ptr(0):{17}) <= 20 do (Ptr(0):{17} := (!Ptr(0):{17}) + 1) end)); Ptr(0):{17})
-> (((Ptr(0):{17} := 18); (while (!Ptr(0):{17}) <= 20 do (Ptr(0):{17} := (!Ptr(0):{17}) + 1) end)); Ptr(0):{17})
-> (((); (while (!Ptr(0):{18}) <= 20 do (Ptr(0):{18} := (!Ptr(0):{18}) + 1) end)); Ptr(0):{18})
-> ((while (!Ptr(0):{18}) <= 20 do (Ptr(0):{18} := (!Ptr(0):{18}) + 1) end); Ptr(0):{18})
-> (((Ptr(0):{18} := (!Ptr(0):{18}) + 1); (while (!Ptr(0):{18}) <= 20 do (Ptr(0):{18} := (!Ptr(0):{18}) + 1) end)); Ptr(0):{18})
-> (((Ptr(0):{18} := 18 + 1); (while (!Ptr(0):{18}) <= 20 do (Ptr(0):{18} := (!Ptr(0):{18}) + 1) end)); Ptr(0):{18})
-> (((Ptr(0):{18} := 19); (while (!Ptr(0):{18}) <= 20 do (Ptr(0):{18} := (!Ptr(0):{18}) + 1) end)); Ptr(0):{18})
-> (((); (while (!Ptr(0):{19}) <= 20 do (Ptr(0):{19} := (!Ptr(0):{19}) + 1) end)); Ptr(0):{19})
-> ((while (!Ptr(0):{19}) <= 20 do (Ptr(0):{19} := (!Ptr(0):{19}) + 1) end); Ptr(0):{19})
-> (((Ptr(0):{19} := (!Ptr(0):{19}) + 1); (while (!Ptr(0):{19}) <= 20 do (Ptr(0):{19} := (!Ptr(0):{19}) + 1) end)); Ptr(0):{19})
-> (((Ptr(0):{19} := 19 + 1); (while (!Ptr(0):{19}) <= 20 do (Ptr(0):{19} := (!Ptr(0):{19}) + 1) end)); Ptr(0):{19})
-> (((Ptr(0):{19} := 20); (while (!Ptr(0):{19}) <= 20 do (Ptr(0):{19} := (!Ptr(0):{19}) + 1) end)); Ptr(0):{19})
-> (((); (while (!Ptr(0):{20}) <= 20 do (Ptr(0):{20} := (!Ptr(0):{20}) + 1) end)); Ptr(0):{20})
-> ((while (!Ptr(0):{20}) <= 20 do (Ptr(0):{20} := (!Ptr(0):{20}) + 1) end); Ptr(0):{20})
-> (((Ptr(0):{20} := (!Ptr(0):{20}) + 1); (while (!Ptr(0):{20}) <= 20 do (Ptr(0):{20} := (!Ptr(0):{20}) + 1) end)); Ptr(0):{20})
-> (((Ptr(0):{20} := 20 + 1); (while (!Ptr(0):{20}) <= 20 do (Ptr(0):{20} := (!Ptr(0):{20}) + 1) end)); Ptr(0):{20})
-> (((Ptr(0):{20} := 21); (while (!Ptr(0):{20}) <= 20 do (Ptr(0):{20} := (!Ptr(0):{20}) + 1) end)); Ptr(0):{20})
-> (((); (while (!Ptr(0):{21}) <= 20 do (Ptr(0):{21} := (!Ptr(0):{21}) + 1) end)); Ptr(0):{21})
-> ((while (!Ptr(0):{21}) <= 20 do (Ptr(0):{21} := (!Ptr(0):{21}) + 1) end); Ptr(0):{21})
-> ((); Ptr(0):{21})
-> Ptr(0):{21}
===== test29 =====
20
===== test30 =====
[let,x,:,<,int,>,=,ref,10,in,let,y,:,<,int,>,=,ref,5,in,(,y,:=,!,x,/,!,y,),;,!,x,*,!,y]
===== test31 =====
let x : <int> = (ref 10) in let y : <int> = (ref 5) in ((y := (!x) / (!y)); (!x) * (!y))
===== test32 =====
-> let x : <int> = (ref 10) in let y : <int> = (ref 5) in ((y := (!x) / (!y)); (!x) * (!y))
-> let x : <int> = Ptr(0):{10} in let y : <int> = (ref 5) in ((y := (!x) / (!y)); (!x) * (!y))
-> let y : <int> = (ref 5) in ((y := (!Ptr(0):{10}) / (!y)); (!Ptr(0):{10}) * (!y))
-> let y : <int> = Ptr(1):{5} in ((y := (!Ptr(0):{10}) / (!y)); (!Ptr(0):{10}) * (!y))
-> ((Ptr(1):{5} := (!Ptr(0):{10}) / (!Ptr(1):{5})); (!Ptr(0):{10}) * (!Ptr(1):{5}))
-> ((Ptr(1):{5} := 10 / (!Ptr(1):{5})); (!Ptr(0):{10}) * (!Ptr(1):{5}))
-> ((Ptr(1):{5} := 10 / 5); (!Ptr(0):{10}) * (!Ptr(1):{5}))
-> ((Ptr(1):{5} := 2); (!Ptr(0):{10}) * (!Ptr(1):{5}))
-> ((); (!Ptr(0):{10}) * (!Ptr(1):{2}))
-> (!Ptr(0):{10}) * (!Ptr(1):{2})
-> 10 * (!Ptr(1):{2})
-> 10 * 2
-> 20
